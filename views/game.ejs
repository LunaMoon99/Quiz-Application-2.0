<!DOCTYPE html>
<html lang="en">

<head>
      <meta charset="UTF-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>ThinkStorming</title>
      <link rel="stylesheet" href="public/stylesheets/app.css">
      <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css"> 
      
      <style>
            .choice-container {
                  display: flex;
                  margin-bottom: 0.5rem;
                  width: 100%;
                  font-size: 1.8rem;
                  border: 0.1rem solid rgba(191, 206, 203, 0.24);
                  background-color: rgba(230, 250, 208, 0.713);
                  border-radius: 5px;
                  cursor: pointer;
            }

            body {
                  background: linear-gradient(135deg, #6a11cb, #2575fc);
                  color: #ffffff;
                  line-height: 1.6;
                  min-height: 100vh;
                  display: flex;
                  flex-direction: column;
                  align-items: center;
                  justify-content: center;
                  padding: 20px;
            }


            /*Modifies the selection letter box */
            .choice-prefix {
                  padding: 1.5rem 2.5rem;
                  background-color: rgba(248, 217, 46, 0.711);
                  color: black;
            }

            .choice-text {
                  padding: 1.5rem;
            }

            /* HOVER EFFECT */
            .choice-container:hover {
                  cursor: pointer;
                  box-shadow: 0 0.4rem 1.4rem 0 rgba(86, 185, 235, 0.5);
                  transform: translateY(-0.1rem);
                  transition: transform 150ms;
            }


            /* timer */

            .time-bar {
                  height: 50px;
                  width: 85px;
                  font-size: 2.2rem;
                  color: white;
                  margin-bottom: 1rem;
                  border-radius: 5px;
                  padding: 10px;
                  background-color: rgba(247, 242, 248, 0.533);
                  display: flex;
                  align-items: center;
                  justify-content: center;
                  position: absolute;
                  right: 100px;
                  top: 172px;
                  animation: breathing 1.5s ease-in-out infinite;
            }

            .timer {
                  height: 100%;
                  width: 100%;
                  border-radius: 3px;
                  display: flex;
                  align-items: center;
                  justify-content: center;
                  margin: 120px 80px;
                  font-weight: bold;
                  opacity: 1;
                  animation: breathing 1.5s ease-in-out infinite;
            }

            @keyframes breathing {
                  0% {
                        background-color: rgba(230, 185, 185, 0.3); /* Start with a soft red and low opacity */
                        opacity: 0.5;  /* Low opacity */
                  }
                  100% {
                        background-color: rgb(230, 24, 24); /* Full red with no transparency */
                        opacity: 1; /* Full opacity */
                  }
            }



            /* QUESTION SCORE STYLING */

            .hud-prefix {
                  font-family: Arial, Helvetica, sans-serif;
                  font-style: italic;
                  text-align: left; 
                  font-size: 3rem;
            }

            #hud {
                  display: flex;
                  justify-content: space-between;
            }

            .hud-main-text {
                  justify-content: flex-start;
            }

            #progressBar {
                  width: 50rem;
                  height: 1rem;
                  border: 0.2rem solid #16b423;
                  margin-top: 2rem;
            }

            #progressBarFull {
                  height: .7rem;
                  background-color: #19b2b5;
                  width: 0%;
            }

            .correct {
                  background-color: #28a745;
            }

            .incorrect {
                  background-color: #dc3545;
            }


            /* FOOTER */
            footer {
                  text-align: center;
                  margin-top: 20px;
                  font-size: 0.9rem;
                  opacity: 0.8;
                  color: white;
            }

            footer p {
                  margin-bottom: 40px;
                  color: rgb(226, 230, 14);
                  font-size: medium;
            }


            /* nav bar */
            nav, 
            .nav-link {
                  display: flex;
                  flex-direction: row;
                  color: rgb(250, 251, 251);
                  text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);
                  font-size: medium;
            }

            nav{
                  justify-content: space-around;
                  align-items: center;
                  height: 12vh;
            }

            .nav-link {
                  list-style: none;
                  gap: 1rem;
                  font-size: 14rem;
            }

            nav ul {
                  display: flex;
                  flex-direction: row;
                  /* padding: 0;
                  margin: 0; */
                  list-style: none;
            }

            nav ul li {
                  /* margin: 0; */
                  list-style: none; 
            }

            li a {
                  display: block;
                  color: white;
                  text-align: center;
                  /* padding: 14px 16px; */
                  text-decoration: none;
                  padding-right: 15px;
            }

            a{
                  color: black;
                  text-decoration: none;
                  text-decoration-color: white;
            }

            a:hover{
                  color: yellow;
                  text-decoration: underline;
                  text-underline-offset: 1rem;
                  text-decoration-color: yellow;
            }

            .logo {
                  font-family: 'Brush Script MT', cursive;
                  font-size: 5rem;
                  margin-right: 380px;
                  color: yellow;
            }

            .logo:hover{
                  cursor: default;
            } 
      </style>
</head>

<body>
      <!-- desktop-nav -->
      <nav id ="desktop-nav">
            <div class="logo"> ThinkStorm </div>
            <div>
                  <ul class = "nav-links">
                        <li><a href="/home">Home</a></li>
                        <li><a href="/profile">Profile</a></li>
                  </ul>
            </div>
      </nav> 
      <div class="container">
            <div id="game" class="justify-center flex-column">
                  <div id="hud">
                        <div id="hud-item">
                              <p id="progressText" class="hud-prefix">
                                    Question
                              </p>
                              <div id="progressBar">
                                    <div id="progressBarFull"></div>
                              </div>
                        </div>
                        <div id="hud-item">
                              <p class="hud-prefix">
                                    Score
                              </p>
                              <h1 class="hud-main-text" id="score">
                                    0
                              </h1>
                        </div>
                  </div>

                  <div class="time-bar">
                        <div class="timer">
                              <i class="fa-regular fa-clock"></i> 
                              <span class="time-duration">15s</span> 
                        </div>
                  </div>

                  <h2 id="question">Answer by selecting for the best choice.</h2>
                  <div class="choice-container">
                        <p class="choice-prefix">A</p>
                        <p class="choice-text" data-number="1">Option 1</p>
                  </div>
                  <div class="choice-container">
                        <p class="choice-prefix">B</p>
                        <p class="choice-text" data-number="2">Option 2</p>
                  </div>
                  <div class="choice-container">
                        <p class="choice-prefix">C</p>
                        <p class="choice-text" data-number="3">Option 3</p>
                  </div>
                  <div class="choice-container">
                        <p class="choice-prefix">D</p>
                        <p class="choice-text" data-number="4">Option 4</p>
                  </div>
            </div>
      </div>
      <footer>
        <p>&copy; 2025 ThinkStorm. All rights reserved. Your trivia adventure starts here!</p>
      </footer>
      <script>
            // Reference top the question


            const question = document.getElementById("question");
            const choices = Array.from(document.getElementsByClassName("choice-text"));
            const progressText = document.getElementById("progressText");
            const scoreText = document.getElementById("score");
            const progressBarFull = document.getElementById("progressBarFull");
            console.log(choices);

            const TimerDisplay = document.querySelector(".time-duration");

            let currentQuestion = {};
            let acceptingAnswers = true;
            let score = 0;
            let questionCounter = 0; // what question you are on
            let availableQuestions = [];  // empty array for remaining questions
            let timer = null; // declare timer variable
            const QUIZ_TIME_LIMIT = 15; // 15 seconds limit for each question
            let currentTime = QUIZ_TIME_LIMIT;

            // Timer reset function
            const resetTimer = () => {
            clearInterval(timer);
            currentTime = QUIZ_TIME_LIMIT;
            TimerDisplay.textContent = `${currentTime}s`;

            }


            // Timer start function
            const startTimer = () => {
            timer = setInterval(() => {
            currentTime--;
            TimerDisplay.textContent = `${currentTime}s`;

            if (currentTime <= 0) {
            clearInterval(timer);
            acceptingAnswers = false; 
            getNewQuestion(); // Move to the next question
            }
            }, 1000);
            }

            // Updated questionarie, being fetched from OpenTrivia API 
            let questions = [];
            // Fetch the JSON questions
            fetch(
            `https://opentdb.com/api.php?amount=10&category=9&difficulty=medium&type=multiple`
            )
            .then((res) => {
            return res.json();
            })
            .then((openTriviaQuestions) => {
            questions = openTriviaQuestions.results.map((openTriviaQuestions) => {
            const buildQuestion = {
            question: openTriviaQuestions.question,
            };

            const answerOptions = [...openTriviaQuestions.incorrect_answers];
            buildQuestion.answer = Math.floor(Math.random() * 4) + 1;
            answerOptions.splice(
            buildQuestion.answer - 1,
            0,
            openTriviaQuestions.correct_answer
            );  

            answerOptions.forEach((choice, index) => {
            buildQuestion[`choice` + (index + 1)] = choice;
            });

            return buildQuestion;
            });
            startGame();
            })
            .catch((err) => {
            console.error(err);
            });

            // CONSTANTS
            const QUESTION_CORRECT_BONUS = 10;
            const MAX_QUESTIONS = 10;

            startGame = () => {
            questionCounter = 0;
            score = 0;
            availableQuestions = [...questions];
            console.log(availableQuestions);
            startTimer();
            getNewQuestion();
            };

            getNewQuestion = () => { // function to reload a new question
            if (availableQuestions.length === 0 || questionCounter >= MAX_QUESTIONS){
                  window.location.replace("/results?score="+score);
                  return;
            };

            questionCounter++;
            progressText.innerText = `Question ${questionCounter}/${MAX_QUESTIONS}`;
            //Update the progress bar
            progressBarFull.style.width = `${(questionCounter / MAX_QUESTIONS) * 100}%`;

            const questionIndex = Math.floor(Math.random() * availableQuestions.length);  // Get a random number for the newQuestion
            currentQuestion = availableQuestions[questionIndex];
            question.innerText = currentQuestion.question;

            resetTimer(); // Reset the timer
            startTimer(); // Start the timer

            // Grab out choices and iterate 
            choices.forEach((choice) => {
            const number = choice.dataset['number'];
            choice.innerText = currentQuestion['choice' + number];
            // const letter = choice.dataset["letter"];
            // choice.innerText = `${currentQuestion[letter]}`;
            });

            // Remove the current question from the available questions
            availableQuestions.splice(questionIndex, 1);
            acceptingAnswers = true;

            };

            // Add event listeners to the choices

            document.querySelectorAll('.choice-container').forEach(choiceContainer => {
            choiceContainer.addEventListener('click', (e) => {

            if (!acceptingAnswers) return;

            acceptingAnswers = false;
            clearInterval(timer); // Stop the timer once an answer is selected

            const selectedAnswer = choiceContainer.querySelector('.choice-text').dataset['number'];  // select the whole answer container 

            const classToApply = selectedAnswer == currentQuestion.answer ? 'correct' : 'incorrect';

            if (classToApply === 'correct') {
            increaseScore(QUESTION_CORRECT_BONUS);  // increase score
            }

            // Apply the corresponding class to style the choice
            choiceContainer.classList.add(classToApply);

            // Delay before loading the next question
            const handleNextQuestion = () => {
            // Clear the interval for the timer if applicable
            clearInterval(timer); 
            choiceContainer.classList.remove(classToApply);
            document.querySelectorAll('.choice-container').forEach(container => {
            container.classList.remove("correct", "incorrect");
            });
            getNewQuestion();
            };

            setTimeout(handleNextQuestion, 1000);
            });
            });

            increaseScore = num => {
            score += num;
            scoreText.innerText = score;
            };

      </script>
</body>

</html>
